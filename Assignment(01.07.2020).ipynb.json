{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CSE-221710309048-PRANAV SUNDARESAN BABU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASENUM</th>\n",
       "      <th>ATTORNEY</th>\n",
       "      <th>CLMSEX</th>\n",
       "      <th>CLMINSUR</th>\n",
       "      <th>SEATBELT</th>\n",
       "      <th>CLMAGE</th>\n",
       "      <th>LOSS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>34.940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>66</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0.037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>96</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.038</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CASENUM  ATTORNEY  CLMSEX  CLMINSUR  SEATBELT  CLMAGE    LOSS\n",
       "0        5         0     0.0       1.0       0.0    50.0  34.940\n",
       "1        3         1     1.0       0.0       0.0    18.0   0.891\n",
       "2       66         1     0.0       1.0       0.0     5.0   0.330\n",
       "3       70         0     0.0       1.0       1.0    31.0   0.037\n",
       "4       96         1     0.0       1.0       0.0    30.0   0.038"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv(\"https://raw.githubusercontent.com/Mounika-Kajjam/Datasets/master/claimants.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ATTORNEY</th>\n",
       "      <th>CLMSEX</th>\n",
       "      <th>CLMINSUR</th>\n",
       "      <th>SEATBELT</th>\n",
       "      <th>CLMAGE</th>\n",
       "      <th>LOSS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>34.940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0.037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>3.705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1340 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ATTORNEY  CLMSEX  CLMINSUR  SEATBELT  CLMAGE    LOSS\n",
       "0            0     0.0       1.0       0.0    50.0  34.940\n",
       "1            1     1.0       0.0       0.0    18.0   0.891\n",
       "2            1     0.0       1.0       0.0     5.0   0.330\n",
       "3            0     0.0       1.0       1.0    31.0   0.037\n",
       "4            1     0.0       1.0       0.0    30.0   0.038\n",
       "...        ...     ...       ...       ...     ...     ...\n",
       "1335         1     0.0       1.0       0.0     NaN   0.576\n",
       "1336         0     1.0       1.0       0.0    46.0   3.705\n",
       "1337         1     1.0       1.0       0.0    39.0   0.099\n",
       "1338         0     1.0       0.0       0.0     8.0   3.177\n",
       "1339         1     1.0       1.0       0.0    30.0   0.688\n",
       "\n",
       "[1340 rows x 6 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop(['CASENUM'],axis=1,inplace=True)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ATTORNEY      0\n",
       "CLMSEX       12\n",
       "CLMINSUR     41\n",
       "SEATBELT     48\n",
       "CLMAGE      189\n",
       "LOSS          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ATTORNEY</th>\n",
       "      <th>CLMSEX</th>\n",
       "      <th>CLMINSUR</th>\n",
       "      <th>SEATBELT</th>\n",
       "      <th>CLMAGE</th>\n",
       "      <th>LOSS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>34.940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0.037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>3.705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1338</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1339</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1340 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ATTORNEY  CLMSEX  CLMINSUR  SEATBELT  CLMAGE    LOSS\n",
       "0            0     0.0       1.0       0.0    50.0  34.940\n",
       "1            1     1.0       0.0       0.0    18.0   0.891\n",
       "2            1     0.0       1.0       0.0     5.0   0.330\n",
       "3            0     0.0       1.0       1.0    31.0   0.037\n",
       "4            1     0.0       1.0       0.0    30.0   0.038\n",
       "...        ...     ...       ...       ...     ...     ...\n",
       "1335         1     0.0       1.0       0.0    10.0   0.576\n",
       "1336         0     1.0       1.0       0.0    46.0   3.705\n",
       "1337         1     1.0       1.0       0.0    39.0   0.099\n",
       "1338         0     1.0       0.0       0.0     8.0   3.177\n",
       "1339         1     1.0       1.0       0.0    30.0   0.688\n",
       "\n",
       "[1340 rows x 6 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def fill_na(col):\n",
    "    col.fillna(col.value_counts().index[0],inplace=True)\n",
    "    return col\n",
    "data.apply(lambda col:fill_na(col))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ATTORNEY    0\n",
       "CLMSEX      0\n",
       "CLMINSUR    0\n",
       "SEATBELT    0\n",
       "CLMAGE      0\n",
       "LOSS        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLMSEX</th>\n",
       "      <th>CLMINSUR</th>\n",
       "      <th>SEATBELT</th>\n",
       "      <th>CLMAGE</th>\n",
       "      <th>LOSS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>34.940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0.037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.038</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CLMSEX  CLMINSUR  SEATBELT  CLMAGE    LOSS\n",
       "0     0.0       1.0       0.0    50.0  34.940\n",
       "1     1.0       0.0       0.0    18.0   0.891\n",
       "2     0.0       1.0       0.0     5.0   0.330\n",
       "3     0.0       1.0       1.0    31.0   0.037\n",
       "4     0.0       1.0       0.0    30.0   0.038"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data.iloc[:,1:]\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    1\n",
       "2    1\n",
       "3    0\n",
       "4    1\n",
       "Name: ATTORNEY, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=data.ATTORNEY\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LOGISTIC REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from  sklearn.linear_model import LogisticRegression\n",
    "reg=LogisticRegression()\n",
    "reg.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1,\n",
       "       1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0,\n",
       "       0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n",
       "       1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1,\n",
       "       1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,\n",
       "       0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n",
       "       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n",
       "       1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1,\n",
       "       0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1,\n",
       "       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,\n",
       "       1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,\n",
       "       0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,\n",
       "       1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1,\n",
       "       0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1,\n",
       "       1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,\n",
       "       1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1,\n",
       "       0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1,\n",
       "       0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1,\n",
       "       1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n",
       "       0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1,\n",
       "       0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1,\n",
       "       1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,\n",
       "       0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,\n",
       "       1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1,\n",
       "       1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1,\n",
       "       1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1,\n",
       "       0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n",
       "       0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0,\n",
       "       0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,\n",
       "       1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0,\n",
       "       0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n",
       "       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n",
       "       1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0,\n",
       "       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n",
       "       1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n",
       "       1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,\n",
       "       1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,\n",
       "       1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n",
       "       0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0,\n",
       "       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1,\n",
       "       1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred = reg.predict(X_train)\n",
    "y_train_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[314, 173],\n",
       "       [ 95, 356]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix,accuracy_score\n",
    "conf = confusion_matrix(y_train,y_train_pred)\n",
    "conf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a21c0cd90>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusion_matrix(y_train,y_train_pred),annot=True,cmap='Greens',fmt='3.0f',annot_kws={'size':'20'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from  sklearn.linear_model import LogisticRegression\n",
    "reg=LogisticRegression()\n",
    "reg.fit(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n",
       "       0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n",
       "       1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1,\n",
       "       1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0,\n",
       "       1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n",
       "       0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1,\n",
       "       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n",
       "       0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,\n",
       "       1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,\n",
       "       0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,\n",
       "       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n",
       "       1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n",
       "       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n",
       "       0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0,\n",
       "       1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0,\n",
       "       1, 1, 1, 1, 0, 0])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred = reg.predict(X_test)\n",
    "y_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 99,  99],\n",
       "       [ 35, 169]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix,accuracy_score\n",
    "conf = confusion_matrix(y_test,y_test_pred)\n",
    "conf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a21e11210>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusion_matrix(y_test,y_test_pred),annot=True,fmt='3.0f',annot_kws={'size':'20'},cmap='Greens')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.64      0.70       487\n",
      "           1       0.67      0.79      0.73       451\n",
      "\n",
      "    accuracy                           0.71       938\n",
      "   macro avg       0.72      0.72      0.71       938\n",
      "weighted avg       0.72      0.71      0.71       938\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.50      0.60       198\n",
      "           1       0.63      0.83      0.72       204\n",
      "\n",
      "    accuracy                           0.67       402\n",
      "   macro avg       0.68      0.66      0.66       402\n",
      "weighted avg       0.68      0.67      0.66       402\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_train,y_train_pred))\n",
    "print(classification_report(y_test,y_test_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLMSEX</th>\n",
       "      <th>CLMINSUR</th>\n",
       "      <th>SEATBELT</th>\n",
       "      <th>CLMAGE</th>\n",
       "      <th>LOSS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.864142</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>1.125005</td>\n",
       "      <td>0.482957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.864142</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>-1.005695</td>\n",
       "      <td>0.121123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.157217</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>-1.107157</td>\n",
       "      <td>0.660376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.864142</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>8.435274</td>\n",
       "      <td>-1.310081</td>\n",
       "      <td>-0.030183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.157217</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>-0.802771</td>\n",
       "      <td>0.065398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>933</th>\n",
       "      <td>0.864142</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>1.226466</td>\n",
       "      <td>-0.410509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>934</th>\n",
       "      <td>0.864142</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>1.023543</td>\n",
       "      <td>-0.232465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>935</th>\n",
       "      <td>0.864142</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>-0.549116</td>\n",
       "      <td>-0.030683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>936</th>\n",
       "      <td>-1.157217</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>-0.802771</td>\n",
       "      <td>-0.415507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>937</th>\n",
       "      <td>0.864142</td>\n",
       "      <td>0.323773</td>\n",
       "      <td>-0.118550</td>\n",
       "      <td>-1.056426</td>\n",
       "      <td>-0.394891</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>938 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       CLMSEX  CLMINSUR  SEATBELT    CLMAGE      LOSS\n",
       "0    0.864142  0.323773 -0.118550  1.125005  0.482957\n",
       "1    0.864142  0.323773 -0.118550 -1.005695  0.121123\n",
       "2   -1.157217  0.323773 -0.118550 -1.107157  0.660376\n",
       "3    0.864142  0.323773  8.435274 -1.310081 -0.030183\n",
       "4   -1.157217  0.323773 -0.118550 -0.802771  0.065398\n",
       "..        ...       ...       ...       ...       ...\n",
       "933  0.864142  0.323773 -0.118550  1.226466 -0.410509\n",
       "934  0.864142  0.323773 -0.118550  1.023543 -0.232465\n",
       "935  0.864142  0.323773 -0.118550 -0.549116 -0.030683\n",
       "936 -1.157217  0.323773 -0.118550 -0.802771 -0.415507\n",
       "937  0.864142  0.323773 -0.118550 -1.056426 -0.394891\n",
       "\n",
       "[938 rows x 5 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "scaled_X_train = pd.DataFrame(scaler.fit_transform(X_train),columns=X_train.columns)\n",
    "scaled_X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLMSEX</th>\n",
       "      <th>CLMINSUR</th>\n",
       "      <th>SEATBELT</th>\n",
       "      <th>CLMAGE</th>\n",
       "      <th>LOSS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.083039</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>-0.780654</td>\n",
       "      <td>-0.324633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.083039</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>-0.780654</td>\n",
       "      <td>3.001351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.923328</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>-0.879464</td>\n",
       "      <td>-0.268778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.923328</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>-0.928870</td>\n",
       "      <td>0.185782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.923328</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>6.608076</td>\n",
       "      <td>0.899128</td>\n",
       "      <td>3.381416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>0.923328</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>-1.126491</td>\n",
       "      <td>-0.304262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>0.923328</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>1.689614</td>\n",
       "      <td>-0.278698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>-1.083039</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>-0.879464</td>\n",
       "      <td>-0.200275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>-1.083039</td>\n",
       "      <td>0.289064</td>\n",
       "      <td>6.608076</td>\n",
       "      <td>0.207453</td>\n",
       "      <td>-0.322170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>0.923328</td>\n",
       "      <td>-3.459442</td>\n",
       "      <td>-0.151330</td>\n",
       "      <td>-0.780654</td>\n",
       "      <td>-0.198744</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       CLMSEX  CLMINSUR  SEATBELT    CLMAGE      LOSS\n",
       "0   -1.083039  0.289064 -0.151330 -0.780654 -0.324633\n",
       "1   -1.083039  0.289064 -0.151330 -0.780654  3.001351\n",
       "2    0.923328  0.289064 -0.151330 -0.879464 -0.268778\n",
       "3    0.923328  0.289064 -0.151330 -0.928870  0.185782\n",
       "4    0.923328  0.289064  6.608076  0.899128  3.381416\n",
       "..        ...       ...       ...       ...       ...\n",
       "397  0.923328  0.289064 -0.151330 -1.126491 -0.304262\n",
       "398  0.923328  0.289064 -0.151330  1.689614 -0.278698\n",
       "399 -1.083039  0.289064 -0.151330 -0.879464 -0.200275\n",
       "400 -1.083039  0.289064  6.608076  0.207453 -0.322170\n",
       "401  0.923328 -3.459442 -0.151330 -0.780654 -0.198744\n",
       "\n",
       "[402 rows x 5 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_X_test = pd.DataFrame(scaler.fit_transform(X_test),columns=X_test.columns)\n",
    "scaled_X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.582089552238806,\n",
       " 0.5671641791044776,\n",
       " 0.6194029850746269,\n",
       " 0.6169154228855721,\n",
       " 0.6442786069651741,\n",
       " 0.5870646766169154,\n",
       " 0.654228855721393,\n",
       " 0.6169154228855721,\n",
       " 0.6243781094527363,\n",
       " 0.6019900497512438,\n",
       " 0.6318407960199005,\n",
       " 0.6144278606965174,\n",
       " 0.6517412935323383,\n",
       " 0.6368159203980099,\n",
       " 0.6343283582089553,\n",
       " 0.6169154228855721,\n",
       " 0.6417910447761194,\n",
       " 0.6343283582089553,\n",
       " 0.6442786069651741]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "scores =[]\n",
    "for k in range(1,20):\n",
    "    knn_model = KNeighborsClassifier(n_neighbors=k)#,metric='euclidean')\n",
    "    knn_model.fit(scaled_X_train,y_train)\n",
    "    pred_test = knn_model.predict(scaled_X_test)\n",
    "    scores.append(accuracy_score(y_test,pred_test))\n",
    "scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a2262ce50>]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1,20),scores,marker='o',markerfacecolor='r',linestyle='-')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='euclidean',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=7, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_model = KNeighborsClassifier(n_neighbors=7,metric='euclidean')\n",
    "final_model.fit(scaled_X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,\n",
       "       1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0,\n",
       "       0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1,\n",
       "       1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,\n",
       "       0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1,\n",
       "       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n",
       "       1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n",
       "       0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
       "       0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1,\n",
       "       1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,\n",
       "       0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,\n",
       "       1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1,\n",
       "       0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1,\n",
       "       1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1,\n",
       "       1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1,\n",
       "       0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1,\n",
       "       0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1,\n",
       "       1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1,\n",
       "       1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1,\n",
       "       1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n",
       "       1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1,\n",
       "       0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0,\n",
       "       1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n",
       "       1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1,\n",
       "       1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1,\n",
       "       0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n",
       "       1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0,\n",
       "       0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,\n",
       "       0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0,\n",
       "       0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,\n",
       "       0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0,\n",
       "       1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,\n",
       "       1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n",
       "       1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n",
       "       1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1,\n",
       "       1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "       1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0,\n",
       "       0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1,\n",
       "       1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1,\n",
       "       1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_train_pred = final_model.predict(scaled_X_train)\n",
    "final_train_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2274f610>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "sns.heatmap(confusion_matrix(y_train,final_train_pred),annot=True,fmt='d',cmap='Greens')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.76      0.76       487\n",
      "           1       0.74      0.75      0.74       451\n",
      "\n",
      "    accuracy                           0.75       938\n",
      "   macro avg       0.75      0.75      0.75       938\n",
      "weighted avg       0.75      0.75      0.75       938\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_train,final_train_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n",
       "       0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0,\n",
       "       0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n",
       "       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0,\n",
       "       1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1,\n",
       "       0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,\n",
       "       1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1,\n",
       "       0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,\n",
       "       1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0,\n",
       "       1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n",
       "       0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n",
       "       0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n",
       "       0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,\n",
       "       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1,\n",
       "       0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0,\n",
       "       0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0,\n",
       "       0, 0, 1, 1, 0, 1])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_test_pred = final_model.predict(scaled_X_test) #y_test\n",
    "final_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a22963450>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(confusion_matrix(y_test,final_test_pred),annot=True,fmt='d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.64      0.69      0.66       198\n",
      "           1       0.67      0.62      0.65       204\n",
      "\n",
      "    accuracy                           0.65       402\n",
      "   macro avg       0.66      0.65      0.65       402\n",
      "weighted avg       0.66      0.65      0.65       402\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,final_test_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1\n",
       "0    0.428571  0.571429\n",
       "1    1.000000  0.000000\n",
       "2    0.571429  0.428571\n",
       "3    0.714286  0.285714\n",
       "4    0.714286  0.285714\n",
       "..        ...       ...\n",
       "397  0.714286  0.285714\n",
       "398  0.285714  0.714286\n",
       "399  0.428571  0.571429\n",
       "400  0.714286  0.285714\n",
       "401  0.428571  0.571429\n",
       "\n",
       "[402 rows x 2 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_prob=final_model.predict_proba(scaled_X_test)\n",
    "y_test_prob=pd.DataFrame(y_test_prob)\n",
    "y_test_prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.418403</td>\n",
       "      <td>0.581597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.998445</td>\n",
       "      <td>0.001555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.368273</td>\n",
       "      <td>0.631727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.595475</td>\n",
       "      <td>0.404525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.999378</td>\n",
       "      <td>0.000622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>0.349051</td>\n",
       "      <td>0.650949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>0.390687</td>\n",
       "      <td>0.609313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>0.480072</td>\n",
       "      <td>0.519928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>0.526419</td>\n",
       "      <td>0.473581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>0.603825</td>\n",
       "      <td>0.396175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>402 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1\n",
       "0    0.418403  0.581597\n",
       "1    0.998445  0.001555\n",
       "2    0.368273  0.631727\n",
       "3    0.595475  0.404525\n",
       "4    0.999378  0.000622\n",
       "..        ...       ...\n",
       "397  0.349051  0.650949\n",
       "398  0.390687  0.609313\n",
       "399  0.480072  0.519928\n",
       "400  0.526419  0.473581\n",
       "401  0.603825  0.396175\n",
       "\n",
       "[402 rows x 2 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_prob1=reg.predict_proba(X_test)\n",
    "y_test_prob1=pd.DataFrame(y_test_prob1)\n",
    "y_test_prob1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1186    1\n",
       "403     0\n",
       "1062    1\n",
       "523     0\n",
       "1286    0\n",
       "       ..\n",
       "1088    0\n",
       "65      1\n",
       "508     0\n",
       "765     0\n",
       "967     0\n",
       "Name: ATTORNEY, Length: 402, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.         0.02525253 0.05555556 0.20707071 0.31313131 0.53535354\n",
      " 0.7979798  0.9040404  1.        ]\n",
      "[0.         0.05392157 0.1127451  0.34313725 0.62254902 0.78921569\n",
      " 0.93627451 0.99019608 1.        ]\n",
      "[2.         1.         0.85714286 0.71428571 0.57142857 0.42857143\n",
      " 0.28571429 0.14285714 0.        ]\n",
      "          0\n",
      "0  2.000000\n",
      "1  1.000000\n",
      "2  0.857143\n",
      "3  0.714286\n",
      "4  0.571429\n",
      "5  0.428571\n",
      "6  0.285714\n",
      "7  0.142857\n",
      "8  0.000000\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score,roc_curve\n",
    "m_prob = final_model.predict_proba(scaled_X_test)[:,1]\n",
    "fpr,tpr,threshold = roc_curve(y_test,m_prob,pos_label=1)\n",
    "print(fpr)\n",
    "print(tpr)\n",
    "print(threshold)\n",
    "print(pd.DataFrame(threshold))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_prob1 = reg.predict_proba(scaled_X_test)[:,1]\n",
    "fpr1,tpr1,threshold1 = roc_curve(y_test,m_prob1,pos_label=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a22b6e4d0>]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fpr,tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a22cd0750>]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fpr1,tpr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6700460487225194"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_test,m_prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6689319667260843"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_test,m_prob1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
