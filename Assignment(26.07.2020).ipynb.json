{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CSE-221710309048-Pranav Sundaresan Babu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>230.1</td>\n",
       "      <td>37.8</td>\n",
       "      <td>69.2</td>\n",
       "      <td>22.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>44.5</td>\n",
       "      <td>39.3</td>\n",
       "      <td>45.1</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>17.2</td>\n",
       "      <td>45.9</td>\n",
       "      <td>69.3</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>151.5</td>\n",
       "      <td>41.3</td>\n",
       "      <td>58.5</td>\n",
       "      <td>18.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>180.8</td>\n",
       "      <td>10.8</td>\n",
       "      <td>58.4</td>\n",
       "      <td>12.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>196</td>\n",
       "      <td>38.2</td>\n",
       "      <td>3.7</td>\n",
       "      <td>13.8</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>197</td>\n",
       "      <td>94.2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>8.1</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>198</td>\n",
       "      <td>177.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>6.4</td>\n",
       "      <td>12.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>199</td>\n",
       "      <td>283.6</td>\n",
       "      <td>42.0</td>\n",
       "      <td>66.2</td>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>200</td>\n",
       "      <td>232.1</td>\n",
       "      <td>8.6</td>\n",
       "      <td>8.7</td>\n",
       "      <td>13.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0     TV  radio  newspaper  sales\n",
       "0             1  230.1   37.8       69.2   22.1\n",
       "1             2   44.5   39.3       45.1   10.4\n",
       "2             3   17.2   45.9       69.3    9.3\n",
       "3             4  151.5   41.3       58.5   18.5\n",
       "4             5  180.8   10.8       58.4   12.9\n",
       "..          ...    ...    ...        ...    ...\n",
       "195         196   38.2    3.7       13.8    7.6\n",
       "196         197   94.2    4.9        8.1    9.7\n",
       "197         198  177.0    9.3        6.4   12.8\n",
       "198         199  283.6   42.0       66.2   25.5\n",
       "199         200  232.1    8.6        8.7   13.4\n",
       "\n",
       "[200 rows x 5 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv(\"https://raw.githubusercontent.com/Mounika-Kajjam/Datasets/master/Advertising.csv\")\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop(columns=['Unnamed: 0'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230.1</td>\n",
       "      <td>37.8</td>\n",
       "      <td>69.2</td>\n",
       "      <td>22.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44.5</td>\n",
       "      <td>39.3</td>\n",
       "      <td>45.1</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.2</td>\n",
       "      <td>45.9</td>\n",
       "      <td>69.3</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>151.5</td>\n",
       "      <td>41.3</td>\n",
       "      <td>58.5</td>\n",
       "      <td>18.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>180.8</td>\n",
       "      <td>10.8</td>\n",
       "      <td>58.4</td>\n",
       "      <td>12.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>38.2</td>\n",
       "      <td>3.7</td>\n",
       "      <td>13.8</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>94.2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>8.1</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>177.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>6.4</td>\n",
       "      <td>12.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>283.6</td>\n",
       "      <td>42.0</td>\n",
       "      <td>66.2</td>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>232.1</td>\n",
       "      <td>8.6</td>\n",
       "      <td>8.7</td>\n",
       "      <td>13.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TV  radio  newspaper  sales\n",
       "0    230.1   37.8       69.2   22.1\n",
       "1     44.5   39.3       45.1   10.4\n",
       "2     17.2   45.9       69.3    9.3\n",
       "3    151.5   41.3       58.5   18.5\n",
       "4    180.8   10.8       58.4   12.9\n",
       "..     ...    ...        ...    ...\n",
       "195   38.2    3.7       13.8    7.6\n",
       "196   94.2    4.9        8.1    9.7\n",
       "197  177.0    9.3        6.4   12.8\n",
       "198  283.6   42.0       66.2   25.5\n",
       "199  232.1    8.6        8.7   13.4\n",
       "\n",
       "[200 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TV           0\n",
       "radio        0\n",
       "newspaper    0\n",
       "sales        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>147.042500</td>\n",
       "      <td>23.264000</td>\n",
       "      <td>30.554000</td>\n",
       "      <td>14.022500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>85.854236</td>\n",
       "      <td>14.846809</td>\n",
       "      <td>21.778621</td>\n",
       "      <td>5.217457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>1.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>74.375000</td>\n",
       "      <td>9.975000</td>\n",
       "      <td>12.750000</td>\n",
       "      <td>10.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>149.750000</td>\n",
       "      <td>22.900000</td>\n",
       "      <td>25.750000</td>\n",
       "      <td>12.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>218.825000</td>\n",
       "      <td>36.525000</td>\n",
       "      <td>45.100000</td>\n",
       "      <td>17.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>296.400000</td>\n",
       "      <td>49.600000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>27.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               TV       radio   newspaper       sales\n",
       "count  200.000000  200.000000  200.000000  200.000000\n",
       "mean   147.042500   23.264000   30.554000   14.022500\n",
       "std     85.854236   14.846809   21.778621    5.217457\n",
       "min      0.700000    0.000000    0.300000    1.600000\n",
       "25%     74.375000    9.975000   12.750000   10.375000\n",
       "50%    149.750000   22.900000   25.750000   12.900000\n",
       "75%    218.825000   36.525000   45.100000   17.400000\n",
       "max    296.400000   49.600000  114.000000   27.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a20c3f990>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(\"TV\",\"sales\",data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a213d3350>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(\"radio\",\"sales\",data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a213aa950>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(\"newspaper\",\"sales\",data=data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>TV</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.054809</td>\n",
       "      <td>0.056648</td>\n",
       "      <td>0.782224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>radio</th>\n",
       "      <td>0.054809</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.354104</td>\n",
       "      <td>0.576223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>newspaper</th>\n",
       "      <td>0.056648</td>\n",
       "      <td>0.354104</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.228299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sales</th>\n",
       "      <td>0.782224</td>\n",
       "      <td>0.576223</td>\n",
       "      <td>0.228299</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 TV     radio  newspaper     sales\n",
       "TV         1.000000  0.054809   0.056648  0.782224\n",
       "radio      0.054809  1.000000   0.354104  0.576223\n",
       "newspaper  0.056648  0.354104   1.000000  0.228299\n",
       "sales      0.782224  0.576223   0.228299  1.000000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a21883b90>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAD8CAYAAABpcuN4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3dd3xUVf7/8ddnklCkJIQ0IAGUIhBApMq6ShERlKqsou6uHde17WJDQeXrbxXBsiooii6irspaVo1KtSAsiICAdBSRkkAgIRRpQpLz+2OGMAlhCJjkDvh+8riP3HLmzudckvuZc869d8w5h4iIyNH4vA5ARETCmxKFiIiEpEQhIiIhKVGIiEhIShQiIhKSEoWIiISkRCEicgoxs/FmttXMlh1lu5nZc2a2xsyWmFnrY+1TiUJE5NQyAegRYntPoFFgGgSMPdYOlShERE4hzrmZQE6IIn2B153fXCDGzGqF2mdkaQZ4qrALk3W7OrBvyvdehyBhqPGoS7wOIaxsuP9L+7X7KPE557OMm/G3Ag4Z55wbd5xvVwfYGLScHli3+WgvUKIQETlJBJLC8SaGoopLbCETlRKFiIjX7Fc3So5HOpAStJwMbAr1Ao1RiIh4LcJKNpWONODPgaufzgF2OueO2u0EalGIiHivFBsUZvY20BmIM7N04GEgCsA59yIwCbgYWAPsBa471j6VKEREvFaKXU/OuSuPsd0Btx7PPpUoRES8FuaDAEoUIiJeK9/B7OOmRCEi4rXwzhNKFCIiniu9K5rKhBKFiIjX1PUkIiIhhXeeUKIQEfGcL7wzhRKFiIjXwjtPKFGIiHguIrxvpFCiEBHxmloUIiISkq56EhGRkMI7TyhRiIh4Tlc9iYhISOGdJ5QoREQ8p0d4iIhISBrMFhGRkMI7TyhRhJt/3fUkvTp0Y+uObFoM6uZ1OGVi9qzZjBzxBPl5+fQf0I8bbrq+0PYDBw4wdMiDrFy+kuiYaEY9PZI6dWqTkbGJ/r0upX79egC0OKsFDw4fBsAN19xIVlY2lSpWBGDsK2OpWTO2fCt2Akr7WOzZs4fr/nh4H1u2bOWS3hdz7/33lGu9fq1OZ7RjeLfbiPBFMHHxp7ww9+1C2x+64K90rHc2AJWjKlLztBq0+GdvAB7ocjNdG5yDmfG/dd/y8PTR5R7/cVOLouyZWU3g88BiEpAHZAWW73POTQ0q+zegsXPur+UbZclMmPYuYz6awOv3PuN1KGUiLy+Px/7xOC+9MpbExESuuuJqOnfpRIOGDQrKfPD+h1SvXo1PpqYxedIUnnnqWZ54eiQAySnJvPPBf4rd94hRj5LaPLVc6lEayuJYVKlSpdC6gQOu4oILu5ZPhUqJz3z8o/udXD3xHjbvyuLja19k+g9z+GHb+oIyj3z+QsH8tW36k5rYCIA2dVJpm9yc7v+6AYD3//Qc59Q9i7kbvivfShyv8L4xO9zDKxnn3DbnXCvnXCvgReCfgfmxwMAixQcCbxfdR7iYtfQbcn7e4XUYZWbZ0mWk1E0hOSWZqApR9Oh5ETO+mFGozJdfzKBPP/+nwwu7d2Pe3Hn4v+b31FLWx2L9uvXk5OTQuk3r0g69TLWq3YR12zexYcdmDubn8vHKL+je+Nyjlu/TrCtpK/yfEx2OihEViIqIpEJEFFG+SLL3bC+v0E+cz0o2eRWeZ+9cPt4DeplZRQAzqw/UBv7nYUy/aVu3bCUpKbFgOSEpkS1bs4opkwRAZGQkVatVZccOf/LMyMjg8ksHcv2fb2DhgoWFXvfQ0OFc3v8KXho77qRILGV5LAAmT5rCRT26Y2HerVFUUtU4Nu3aWrC8+ecsEqvFFVu2TvVE6sbUYvb6RQAszFjBnA2LWHD7+yy4/T2+WjufNds2lEvcv0qYJ4pTouvpaJxz28xsHtAD+Ah/a+I/7mQ4i5yiijvyRX/9i/vvMTPi4+OY+vlkYmJiWLF8BX+7fTD/TXuPqlWr8tiox0hMTGDPnj0MvvNuPkn7hN59e5dNJUpJWR2LQ6ZOmsqjI/9RylGXveIS29H+ZPs068Knq74i3+UDUK9GbRrWrEeHMX8A4M0rn6T9Ty2Zt3FJ2QVcGsI8mZ/qLQrwdzMd6n46areTmQ0yswVmtoD0PeUW3G9NYlICmZlbCpa3Zm4hISG+SJlEMjMzAcjNzWX3z7uJjo6mQoUKxMTEANAstRkpKcmsX+fvt05MTAD8ffQXX9KTpUuXl0d1fpWyOhYAq1etJjcvj2apzcqhJqVr889Z1K6eULBcq1o8W3dvK7Zs76ZdSVvxRcFyj8bnsWjTCvYe3M/eg/uZ8eM8Wtc+CY6BlXDyyG8hUXwIXGBmrYHKzrkj2+iAc26cc66tc64tyVXKN8LfkNTmqWxYv4H09AwOHjjIlMlT6dSlc6Eynbt0Iu3DjwGYPu0z2ndoh5mRk5NDXl4eAOkb01m/fgPJycnk5uayfbu/H/rgwYPM/GomDYMGhMNVWRyLQyZPmkLPi3uUW11K03ebVnF6jTqkRCcR5Yukd9OuTP9hzhHlzohNIbpSNb7NOPyhYNOurZyTchYR5iPSF8E5dc9iTdAgeLgysxJNXjmlu54AnHO7zWwGMJ4wHsQ+5K0HxtC5ZUfiomPZ+NZ8Hn79KcZPmeh1WKUmMjKS+4fexy03/ZX8/Hz69e9Lw0YNeH70C6SmNqNz1870v6wfQ+8bRq+L+lA9pjqjnnwcgIULFvL86LFERkbg80Uw7OGhRMdEs3fvPm656VZyc3PJy8vjnI4duOwPl3pb0RIoi2NxyLQp03n+xZPgstBi5Ll8Hpz+HG8MHEWE+fjPksl8n72Oweddx9LNq5m+xp80+jbryscrvyj02k9XfcXv6p3NtBvHA44Za+fz2ZqvPajF8Qn3cSQ71brrzWw4sNs592TQuv7Af4GmzrlVx9zHhcmn1kE5QfumfO91CBKGGo+6xOsQwsqG+7/81Wf5CoNbleicc+DpxZ5klFOuReGcG17Mug8I+3sfReS3KtxbFKdcohAROdkoUYiISEhKFCIiElKY5wklChERr6lFISIiIfksvG9pU6IQEfGYWhQiIhJSmOcJJQoREa/5wjxTKFGIiHhMXU8iIhKSz8PvmiiJ8B5qFxH5DSjNp8eaWQ8zW21ma8xsSDHb65rZl2a2yMyWmNnFx9qnEoWIiMdKK1GYWQTwPNATaAZcaWZFv5BjGPCOc+5s/N/R8wLHoEQhIuKxUmxRtAfWOOfWOucOABOBvkXKOKB6YD4a2HSsnWqMQkTEY8fRrTQIGBS0apxzblzQch1gY9ByOtChyG6GA9PM7HagCtDtWO+rRCEi4rGSXvQUSArjQhQpbk9Fv+viSmCCc+4pM+sIvGFmzZ0LfPF4MZQoREQ85vOV2ihAOpAStJzMkV1LNwA9AJxzX5tZJSAO2HrU+EorOhEROTE+sxJNJTAfaGRmp5tZBfyD1WlFymwALgAws6ZAJSAr1E7VohAR8Vhp3W/nnMs1s9uAqUAEMN45t9zMHgEWOOfSgLuAl83s7/i7pa51x/hObCUKERGPlead2c65ScCkIuseCppfAZx7PPtUohAR8ZgVOwYdPpQoREQ8pmc9nYT2Tfne6xDCQuUejb0OIWykvfKs1yGEjS5tUr0O4ZQT7s96UqIQEfGYWhQiIhKSEoWIiISkRCEiIiGFeZ5QohAR8VopPsKjTChRiIh4TF1PIiISUpjnCSUKERGvqUUhIiIhKVGIiEhIShQiIhKSHuEhIiKhqUUhIiKhqOtJRERCCvM8oUQhIuI1tShERCQkJQoREQlJVz2JiEhIalGIiEhIShQiIhKSEoWIiISkRCEiIiFpMFtEREJSi0IAmD1rNiNHPEF+Xj79B/TjhpuuL7T9wIEDDB3yICuXryQ6JppRT4+kTp3aZGRson+vS6lfvx4ALc5qwYPDhwFwwzU3kpWVTaWKFQEY+8pYataMLd+KlaF/3fUkvTp0Y+uObFoM6uZ1OGVu1fzv+WjsJ+Tn59OhRzu6DuxUaPucT75hTtpcfD4fFSpXYMDf+pFUL5GczO2MuvGfJCTHA1C3aQoD7uznRRVKTYuaTbm6yQB85uOr9Dl8um56oe2/r92BKxr3Y/v+nQB8vvErvsr4GoDLG/WlVXxzDGPZtlW8ufq9co//eClRlBMz6wzc7ZzrZWZ9gGbOucc9DguAvLw8HvvH47z0ylgSExO56oqr6dylEw0aNigo88H7H1K9ejU+mZrG5ElTeOapZ3ni6ZEAJKck884H/yl23yNGPUpq89RyqUd5mzDtXcZ8NIHX733G61DKXH5ePh+MSWPQ49cTHVedZ29/gWYdm5BUL7GgTOsuZ/G7Xh0AWP71Sj5+aRI3PXYdADVrxTL4xds9ib20Gcafm17OqG/HkLN/B8PPuYdFWUvZtCezULl5mQt5Y9W7hdY1jD6dxjFnMHTOYwAMaz+YJjUasWr7D+UW/4kI8zxBeH+jN2B+xxWncy4tXJIEwLKly0ipm0JySjJRFaLo0fMiZnwxo1CZL7+YQZ9+vQG4sHs35s2dh3POg2jDx6yl35Dz8w6vwygXG1anU7N2TWrWiiUyKpJWnVqyfM7KQmUqValUMH9g/wEgzM8uJ+iM6Pps2ZtN1r5t5Lk8vslcSOuEliV6rQOiIqKI9EUS5YskwiLYeWBX2QZcCsysRJNXwrJFYWb1gcnAl0BHYLGZtQAqA+855x4OlOsBPANkAwuDXn8t0NY5d5uZ1QPGA/FAFnCdc25DuVUG2LplK0lJhz8ZJiQlsnTJsmLKJAEQGRlJ1WpV2bHDf5LMyMjg8ksHUrVqFW6741Zat21d8LqHhg4nwufjgu4XMOgvN4V9E1aKtzN7JzHx0QXLMfHRrF+18Yhys9O+Zub7s8k9mMdfnrihYH1O5naevmU0lU6rSI9rL+SMFqeXS9xloUalaHL2by9Yztm/nQbR9Y8o1zaxFWfWaEjm3q28tep9cn7ZwY87f2Jlzg882+lRDOOzjTPZvGdLOUZ/gsL87zYsE0XAmfhP6n81s1jnXI6ZRQCfm1lL4HvgZaArsAYovm8GxgCvO+deM7PrgeeAIzpwzWwQMAhgzNjRR4wh/BrFNQyK/loU13owM+Lj45j6+WRiYmJYsXwFf7t9MP9Ne4+qVavy2KjHSExMYM+ePQy+824+SfuE3n17l1rc4q3izh3n9unIuX06svCLxXz25pdcee8fqB5bjWFv3keV6qeR/n0Grw7/N/e8fGehFsjJxIppKRX961iUtYy5m78l1+XSJfn33NTiT4xcMJqEynHUqpLI32f6x/HubXM7y2o0YPX2H8sh8hMXEeZXPYVz19N659zcwPzlZrYQWASkAs2AJsBPzrkfnP8s+++j7Kcj8FZg/g3g98UVcs6Nc861dc61Lc0kAZCYlEBm5uFPNVszt5CQEF+kTCKZmf4+2NzcXHb/vJvo6GgqVKhATEwMAM1Sm5GSksz6dev9r0lMAKBKlSpcfElPli5dXqpxS/mJjotmR9bOguUdWTupHlv9qOVbdW7J8jkrAIisEEmV6qcBkNy4DjVrx5KVkV22AZehnP07iK1Uo2A5tlINdvyys1CZPQf3kOtyAZiRPpv61eoC0CbxLH7cuY5f8g7wS94BlmQvp0F0+Leuwr3rKZwTxR4AMzsduBu4wDnXEvgUOPRR6UQ68cu94z+1eSob1m8gPT2DgwcOMmXyVDp16VyoTOcunUj78GMApk/7jPYd2mFm5OTkkJeXB0D6xnTWr99AcnIyubm5bN/ub54fPHiQmV/NpGHQ4LicXFLOrEN2RjbbNueQezCXxV8tIbVj00Jlgk/+K79ZTVydOAB279hNfl4+ANs255CdsY2aSSfv1W8/7VpP4mnxxFWuSYRF0CGpNYu2LilUJrrC4STaOqFFwUD3tn3baVKjIT7zEWE+zqzR6IhB8HDkMyvR5JVw7no6pDr+pLHTzBKBnsAMYBVwupk1cM79CFx5lNfPAQbib01cDfyvzCMuIjIykvuH3sctN/2V/Px8+vXvS8NGDXh+9Aukpjajc9fO9L+sH0PvG0avi/pQPaY6o570j8UvXLCQ50ePJTIyAp8vgmEPDyU6Jpq9e/dxy023kpubS15eHud07MBlf7i0vKtWpt56YAydW3YkLjqWjW/N5+HXn2L8lIleh1UmIiIi6H9bH15+4FVcvqPdRW1Iqp/IlNemk9I4mdSOTZn90df8sOhHIiIiqFytEgPvGQDA2qXrmPr6Z/gifPh8Pi67oy+nBVoYJ6N8l88bq97hnta34jNjZsZcMvZk0r/BJazbtYFFWUvpXrczZye0IM/lsefgXl5Z5u9QmL9lEc1iG/NoxwdwOJZmr2Rx1rJjvKP3wn1s0cLxyprAYPYnzrnmgeUJQAdgLfALkOacm1BkMPt/QPPA5bHXcngwuz7+wew4SjiYvT9vb/gdFA9U7tHY6xDCRtorz3odQth4b/WXXocQVl7rPuZXn+V7fnBdic45k/u/6klGCcsWhXNuHdA8aPnao5Sbgn+souj6CcCEoH11LfUgRURKSYQvnEcBwjRRiIj8lng5/lAS4Z3GRER+A0rzqicz62Fmq81sjZkNOUqZy81shZktN7O3iisTTC0KERGPldYn9sC9Zs8DFwLpwHwzS3POrQgq0wi4HzjXObfdzBLKKz4RETlBpXh5bHtgjXNurXPuADAR6FukzE3A88657QDOua3HjO846yMiIqWspF1PZjbIzBYETYOK7KoOEPzsl/TAumCNgcZmNtvM5gauHg1JXU8iIh6LKOH4g3NuHDAuRJHidlT00ttIoBHQGUgGZplZc+fcUZ/AqUQhIuKxUrzqKR1ICVpOBjYVU2auc+4g8JOZrcafOOYfNb7Sik5ERE5MKY5RzAcamdnpZlYB/1Mp0oqU+RDoAmBmcfi7otaG2qlaFCIiHiutR3g453LN7DZgKhABjHfOLTezR4AFzrm0wLbuZrYCyAPucc5tC7VfJQoREY+V5g13zrlJwKQi6x4KmnfA4MBUIkoUIiIeC+/7spUoREQ8F6lnPYmISCjh/phxJQoREY+F+0MBlShERDwW3mlCiUJExHNqUYiISEj64iIREQkpvNOEEoWIiOd01ZOIiISkMQoREQlJiUJOWmmvPOt1CGGjz413eh1C2Fj13mSvQzjlqOtJRERCirDwHs5WohAR8Zi6nkREJCQL83uzlShERDymMQoREQlJXU8iIhKShfm92UoUIiIe07OeREQkJA1mi4hISBqjEBGRkHTVk4iIhOTTYLaIiITi02C2iIiE4tNgtoiIhKIxChERCUlXPYmISEi6j0JERELy6fsoREQkFCUKEREJSWMUIiISksYoREQkJLUoREQkJNMYhQDMnjWbkSOeID8vn/4D+nHDTdcX2n7gwAGGDnmQlctXEh0TzainR1KnTm0yMjbRv9el1K9fD4AWZ7XgweHD2LNnD9f98fA+tmzZyiW9L+be++8p13r9Wqvmf89HYz8hPz+fDj3a0XVgp0Lb53zyDXPS5uLz+ahQuQID/taPpHqJ5GRuZ9SN/yQhOR6Auk1TGHBnPy+qUC7+ddeT9OrQja07smkxqJvX4ZS5b79exCtPvUpefj7d+17AgGv6F9r+4ZsfMz3tc3wRPqJjqnPHg7eSUCuerZuzGHGf/+8sNzeXXpf3pOdlF3lUi5JT15OQl5fHY/94nJdeGUtiYiJXXXE1nbt0okHDBgVlPnj/Q6pXr8YnU9OYPGkKzzz1LE88PRKA5JRk3vngP4X2WaVKlULrBg64igsu7Fo+FSol+Xn5fDAmjUGPX090XHWevf0FmnVsQlK9xIIyrbucxe96dQBg+dcr+filSdz02HUA1KwVy+AXb/ck9vI2Ydq7jPloAq/f+4zXoZS5vLw8Xhr1Co+MeYiaCbHcdc0Q2p/XlrpnpBSUOePM03n6tZFUrFSRSe9NZcLoN7j3scHUiIth1CuPElUhin1793H7lYNpf347asbHelijYwv3Ly4K7+jKiJmVa4JctnQZKXVTSE5JJqpCFD16XsSML2YUKvPlFzPo0683ABd278a8ufNwzpVo/+vXrScnJ4fWbVqXduhlasPqdGrWrknNWrFERkXSqlNLls9ZWahMpSqVCuYP7D8AYf7Jq6zMWvoNOT/v8DqMcvHD8jXUSk4iqU4iUVFRnNf9XL6ZOb9QmZZtm1OxUkUAzmzRiOyt2wCIiooiqkIUAAcP5JKfX7K/Ia/5sBJN3sV3DGZW38xWmtnLZrbczKaZWWUza2BmU8zsWzObZWZNzCzCzNaaX4yZ5ZvZ+YH9zDKzhmbWycwWB6ZFZlbNzDqb2Uwz+8DMVpjZixbotDOzsWa2IPDe/xcU1zozG2lm8wJTw8D6eDN738zmB6ZzA+uHm9k4M5sGvF4mR/Motm7ZSlLS4U/JCUmJbNmaVUyZJAAiIyOpWq0qO3b4TwwZGRlcfulArv/zDSxcsPCI/U+eNIWLenQP++fFFLUzeycx8dEFyzHx0ezctuuIcrPTvmbENU/yyctT6Hdrr4L1OZnbefqW0bxw1zjWLv2pXGKWsrctK4e4xLiC5biEmmzLyjlq+elpX9Cm49kFy1lbsrn9qsFc3/tmLvtz37BvTYD/WU8lmUq4rx5mttrM1pjZkBDlBpiZM7O2x9pnSVsUjYDnnXOpwA7gMmAccLtzrg1wN/CCcy4P+B5oBvwe+BY4z8wqAsnOuTWBsrc651oB5wH7Au/RHrgLaAE0AC4NrB/qnGsLtAQ6mVnLoLh2OefaA2OAQ23yZ4F/OufaBeJ8Jah8G6Cvc+6qohU0s0GBhLTgXy+PL+FhKZniGgZF/8uLaz2YGfHxcUz9fDLv/Hcid993F0PufYDdu3cXKjd10lR6XtKjFCP2TnF/C+f26cj9r93NJTdexGdvfglA9dhqDHvzPgaPvZ0+N1/CmyPeYf+e/eUcrZSFYv8WjvJp+svJM1mz8kcu/VPfgnXxiXGMfutpXvrvGL749Cu2bwv/lpiZr0TTsfdjEcDzQE/85+ErzaxZMeWqAXcA35QkvpImip+cc4sD898C9YHfAe+a2WLgJaBWYPss4PzANAJ/wmgHHGo7zgaeNrM7gBjnXG5g/Tzn3NpAsnk78DqAy81sIbAISMVf+UPeDvrZMTDfDRgTiCsNqB44KABpzrl9FMM5N84519Y517boQPOvlZiUQGbmloLlrZlbSEiIL1ImkczMTAByc3PZ/fNuoqOjqVChAjExMQA0S21GSkoy69etL3jd6lWryc3Lo1nqEb8LYS86LpodWTsLlndk7aR6bPWjlm/VuSXL56wAILJCJFWqnwZAcuM61KwdS1ZGdtkGLOUiLqEm2VsO/19mb91GbHyNI8otnreEd199n2FPDinobgpWMz6WumeksGLxyiO2hZtS7HpqD6wJnEsPABOBvsWU+3/AKKBEn65Kmih+CZrPA2KBHc65VkFT08D2WfhbCu2BSUAM0BmYCeCcexy4EagMzDWzJoHXFf0Y4czsdPwtkAuccy2BT4FKwWWKmfcBHYPiquOc+zmwbU8J61uqUpunsmH9BtLTMzh44CBTJk+lU5fOhcp07tKJtA8/BmD6tM9o36EdZkZOTg55eXkApG9MZ/36DSQnJxe8bvKkKfS8+ORsTaScWYfsjGy2bc4h92Aui79aQmrHpoXKBJ/8V36zmrg6/i6J3Tt2k5+XD8C2zTlkZ2yjZlL4dzHIsTVq1pBNGzeTmbGFgwcPMmvabDqc165QmR9Xr+WFES8x7MkhxMQe7r7M3rKNX/b7T1e7d+1m5XerqFOvdrnGfyJ85ivRFNzzEZgGFdlVHWBj0HJ6YF0BMzsbSHHOfVLS+E50UHcX8JOZ/cE59675O89aOue+w9+UeR1Y65zbH/hkfzPQKxBkA+fcUmCpmXUEmuDvzmofSAzrgSvwd21Vx39y32lmifibUzOC4rgCeDzw8+vAumnAbcATgfdrFdQa8kRkZCT3D72PW276K/n5+fTr35eGjRrw/OgXSE1tRueunel/WT+G3jeMXhf1oXpMdUY9+TgACxcs5PnRY4mMjMDni2DYw0OJjjn8hzFtynSef3G0RzX7dSIiIuh/Wx9efuBVXL6j3UVtSKqfyJTXppPSOJnUjk2Z/dHX/LDoRyIiIqhcrRID7xkAwNql65j6+mf4Inz4fD4uu6MvpwVaGKeitx4YQ+eWHYmLjmXjW/N5+PWnGD9lotdhlYmIyAhuvudGht/xD/Lz8+nWuyt1G6Tw5ksTadi0AR3Ob8eE595g3779jLz/KQDik+IY9tQQNq5LZ/yzr2EYDke/P/ahfsN6Htfo2Eo6/uCcG4f/3HjUXRX3sqD38QH/BK49jvCwY11ZY2b1gU+cc80Dy3cDVYHXgLH4u5yigInOuUcCZWYBs5xzD5jZVcALQKxzLt/MRgNd8LdMVgQC7gg8BGThH6OYCfw1UH4C0AFYi79lk+acm2Bm64BXgYvxtyKudM6tMbM4/H10TfEnwpnOub+Y2XBgt3PuyWMdlP15e0+OSyXK2PT0yV6HEDb63Hin1yGEjVXv6fci2JnRLX71VSQT17xWonPOwIbXhHyvwIfv4c65iwLL9wM450YElqOBH4FDA51JQA7Qxzm34Gj7PWaLwjm3DmgetBx8oi22z8M5d17Q/FvAW0HLR1z4Hsime51zVxSzr2tDhPe8c+7/glc457LxtzCK7md4iP2IiHimFO/Mng80CvTOZAADgYKLd5xzO4GCS8rMbAZwd6gkAb/R+yhERMKJlfDfsQQuDroNmAqsBN5xzi03s0fMrM+JxhcWd2Y752ZQeOyhJK+pXxaxiIiUt9K8B8o5Nwn/hUTB6x46StnOJdlnWCQKEZHfMn1xkYiIhOTl4zlKQolCRMRj4f74HSUKERGPWZhfV6REISLiMbUoREQkpAgNZouISCj6hjsREQlJXU8iIhKSBrNFRCQktShERCQk3XAnIiIh6REeIiISkrqeREQkJA1mi4hISD61KEREJBTdcCciIiFpjEJERELSVU8iIhKST4PZJ5/Goy7xOoSw0KVNqtchhI1V7032OoSw0WRATxR2mU8AAA9hSURBVK9DCCtuevqv3oe6nkREJCQNZouISEhqUYiISEgaoxARkdDUohARkVA0RiEiIiFpjEJEREJSi0JEREJSohARkZD0CA8REQlJLQoREQlJg9kiIhKSWhQiIhKSWhQiIhKSWhQiIhKSrnoSEZGQ1KIQEZGQwj1RhHd7R0TkN8DMSjSVcF89zGy1ma0xsyHFbB9sZivMbImZfW5m9Y61TyUKERHPWQmnY+zFLAJ4HugJNAOuNLNmRYotAto651oC7wGjjrVfJQoREY/5zFeiqQTaA2ucc2udcweAiUDf4ALOuS+dc3sDi3OB5GPGd5z1ERGRUmYl/Wc2yMwWBE2DiuyqDrAxaDk9sO5obgAmHys+DWaLiHispOMPzrlxwLhQuyruZUd5zz8CbYFOx3pfJQoPdDqjHcO73UaEL4KJiz/lhblvF9r+0AV/pWO9swGoHFWRmqfVoMU/ewPwQJeb6drgHMyM/637loenjy73+EtTi5pNubrJAHzm46v0OXy6bnqh7b+v3YErGvdj+/6dAHy+8Su+yvgagMsb9aVVfHMMY9m2Vby5+r1yj780ffv1Il556lXy8vPp3vcCBlzTv9D2D9/8mOlpn+OL8BEdU507HryVhFrxbN2cxYj7niA/L5/c3Fx6Xd6Tnpdd5FEtyt6/7nqSXh26sXVHNi0GdfM6nFJRilc9pQMpQcvJwKYj3s+sGzAU6OSc++VYOz3pE4WZTQA+cc6dFGcJn/n4R/c7uXriPWzelcXH177I9B/m8MO29QVlHvn8hYL5a9v0JzWxEQBt6qTSNrk53f91AwDv/+k5zql7FnM3fFe+lSglhvHnppcz6tsx5OzfwfBz7mFR1lI27cksVG5e5kLeWPVuoXUNo0+nccwZDJ3zGADD2g+mSY1GrNr+Q7nFX5ry8vJ4adQrPDLmIWomxHLXNUNof15b6p5x+G/+jDNP5+nXRlKxUkUmvTeVCaPf4N7HBlMjLoZRrzxKVIUo9u3dx+1XDqb9+e2oGR/rYY3KzoRp7zLmowm8fu8zXodSakoxUcwHGpnZ6UAGMBC4qtB7mZ0NvAT0cM5tLclONUZRzlrVbsK67ZvYsGMzB/Nz+XjlF3RvfO5Ry/dp1pW0FZ8D4HBUjKhAVEQkFSKiiPJFkr1ne3mFXurOiK7Plr3ZZO3bRp7L45vMhbROaFmi1zogKiKKSF8kUb5IIiyCnQd2lW3AZeiH5WuolZxEUp1EoqKiOK/7uXwzc36hMi3bNqdipYoAnNmiEdlbtwEQFRVFVIUoAA4eyCU/v9iehlPGrKXfkPPzDq/DKFWldXmscy4XuA2YCqwE3nHOLTezR8ysT6DYE0BV4F0zW2xmacfab1i2KMysCvAO/mZTBPD/gDOB3kBlYA5ws3POFXldG+Bp/AchG7jWObfZzO4A/gLkAiuccwPLqy5FJVWNY9Ouw0l8889ZtKrdtNiydaonUjemFrPXLwJgYcYK5mxYxILb38eA1779kDXbNpRH2GWiRqVocvYfTnQ5+7fTILr+EeXaJrbizBoNydy7lbdWvU/OLzv4cedPrMz5gWc7PYphfLZxJpv3bCnH6EvXtqwc4hLjCpbjEmqyevnRW0fT076gTcezC5aztmTzyN8fY/PGTK6740+nbGviVFWaj/Bwzk0CJhVZ91DQ/HH314Vri6IHsMk5d5ZzrjkwBRjjnGsXWK4M9Ap+gZlFAaOBAc65NsB44NHA5iHA2YHrhv9SXpUoTnGfCorkuwJ9mnXh01Vfke/yAahXozYNa9ajw5g/0H7MH/hd/bNpn1KyT+DhqLjmdtEjsShrGXfNfJhhX49g+bbV3NTiTwAkVI6jVpVE/j5zGH+bOZRmsY05s0aDcoi6bBT3O3C07ogvJ89kzcofufRPh696jE+MY/RbT/PSf8fwxadfsX3bqfWJ+1RX0quevBKuiWIp0M3MRprZec65nUAXM/vGzJYCXYHUIq85E2gOTDezxcAwDl8fvAR4MzDKn1vcGwZfdrZ73hFjP6Vm889Z1K6eULBcq1o8W3dvK7Zs76ZdSVvxRcFyj8bnsWjTCvYe3M/eg/uZ8eM8Wtcuei/NySNn/w5iK9UoWI6tVIMdv+wsVGbPwT3kOv9/2Yz02dSvVheANoln8ePOdfySd4Bf8g6wJHs5DaJPL7/gS1lcQk2yt2QXLGdv3UZsfI0jyi2et4R3X32fYU8OKehuClYzPpa6Z6SwYvHKMo1XSlvp3HBXVsIyUTjnvgfa4E8YI8zsIeAF/K2FFsDLQKUiLzNguXOuVWBq4ZzrHth2Cf67FdsA35rZEV1uzrlxzrm2zrm2VdvXLqOawXebVnF6jTqkRCcR5Yukd9OuTP9hzhHlzohNIbpSNb7NWF6wbtOurZyTchYR5iPSF8E5dc9iTdAg+Mnmp13rSTwtnrjKNYmwCDoktWbR1iWFykRXqF4w3zqhRcFA97Z922lSoyE+8xFhPs6s0eiIQfCTSaNmDdm0cTOZGVs4ePAgs6bNpsN57QqV+XH1Wl4Y8RLDnhxCTGx0wfrsLdv4Zb//wpXdu3az8rtV1KlXdr/DUvrCO02E7xhFbSDHOfdvM9sNXBvYlG1mVYEB+G89D7YaiDezjs65rwNdUY3xD+ikOOe+NLP/4b8CoCrgSds8z+Xz4PTneGPgKCLMx3+WTOb77HUMPu86lm5ezfQ1/qTRt1lXPl75RaHXfrrqK35X72ym3TgecMxYO5/P1nztQS1KR77L541V73BP61vxmTEzYy4ZezLp3+AS1u3awKKspXSv25mzE1qQ5/LYc3Avryz7NwDztyyiWWxjHu34AA7H0uyVLM5a5nGNTlxEZAQ333Mjw+/4B/n5+XTr3ZW6DVJ486WJNGzagA7nt2PCc2+wb99+Rt7/FADxSXEMe2oIG9elM/7Z1zAMh6PfH/tQv+ExH99z0nrrgTF0btmRuOhYNr41n4dff4rxUyZ6HdavEu5fXGRH6x/3kpldhH9kPh84CNwC9MN/qdc6/HcernfODQ++PNbMWgHPAdH4k+AzwATgy8A6A/7tnHs81PvXHdEl/A6KB7q0Kdq799v1QIebvQ4hbDQZ0NPrEMKKm57+q8/ymfvSS3TOSaqc7ElGCcsWhXNuKv7Lu4ItwD/uULTstUHzi4Hzi9nl70szPhGR0hTujxkPy0QhIvJbEu5dT2E5mC0iIuFDLQoREY+p60lEREJSohARkZA0RiEiIic1tShERDymricRETkGJQoREQkhvNOEEoWIiOfCfTBbiUJExGMaoxARkWNQohARkRDCvetJ91GIiEhIalGIiHhMYxQiInIMShQiIhKCL8zHKJQoREQ8p0QhIiIhhHeaUKIQEQkD4Z0qlChERDwW7vdRKFGIiHgs3C+PNeec1zFIMcxskHNunNdxhAMdi8N0LA7TsSg/ujM7fA3yOoAwomNxmI7FYToW5USJQkREQlKiEBGRkJQowpf6Xg/TsThMx+IwHYtyosFsEREJSS0KEREJSYlCRERCUqLwmJnVNLPFgSnTzDKCli8qUvZvZvaCV7F6zcw6m9kngfk+ZjbE65jEG2Y2wcwGeB3Hb4UShcecc9ucc62cc62AF4F/BubHAgOLFB8IvF3eMZY18zuu30XnXJpz7vGyiknAzPTkBgGUKMLZe0AvM6sIYGb1gdrA/zyMqdSYWX0zWxloIS0E/mVmC8xsuZn9X1C5Hma2ysz+B1watP5aMxsTmK9nZp+b2ZLAz7oe1uflQB2mmVllM2tgZlPM7Fszm2VmTcwswszWBhJkjJnlm9n5gf3MMrOGZtYpqGW5yMyqBVpUM83sAzNbYWYvHkqwZjb2KMdvnZmNNLN5galhYH28mb1vZvMD07mB9cPNbJyZTQNeL+djWMXMPjWz78xsmZldYWYPBeJbFojriGddmFkbM/sqcIynmlmtwPo7AsdpiZlNLM+6nHKcc5rCZAKGA3cHLX8K9A3MDwGe8DrGUqxrfSAfOCewHBv4GQHMAFoClYCNQCP8j9d8B/gkUO5aYExg/mPgmsD89cCHHtUnF2gVWH4H+CPwOdAosK4D8EVgfgqQCvQC5gNDgYrAT0F1OjcwXxX/c9k6A/uBMwLHaTow4GjHL7C8DhgamP9z0PF7C/h9YL4usDLod/BboLIHx/Ay4OWg5ehD9QosvwH0DsxPAAYAUcAcID6w/gpgfGB+E1AxMB/j9e/8yTypRRHe3uZw99Op2O203jk3NzB/uZktBBbhP4E2A5rgP3H+4Px/7f8+yn464j/xgf9k8vsyjDmUn5xziwPz3+JPHr8D3jWzxcBLQK3A9lnA+YFpBP6Y2+FPGgCzgafN7A78J7ncwPp5zrm1zrk8/L8Ph+pa3PE75O2gnx0D892AMYG40oDqZlYtsC3NObfvxA/DCVsKdAu0gM5zzu0EupjZN2a2FOiKv27BzgSaA9MDdRkGJAe2LQHeNLM/4k/icoLUBxnePsR/smiN/xPeQq8DKmV7AMzsdOBuoJ1zbruZTcDfmgA4kRt9vLo56Jeg+TwgEdjh/GNORc0C/oK/O/Eh4B78LYaZAM65x83sU+BiYK6ZdQu8rmjd3DGOX9HXHJr3AR2LJoRAz86eY9a0DDjnvjezNvjrPCLQ/XUr0NY5t9HMhlO4XuBvaS53znXkSJfgT8R9gAfNLDUo4cpxUIsijDnnduPvRhjPqdeaCFYd/8lpp5klAj0D61cBp5tZg8DylUd5/RwOt7yuJnzGcXYBP5nZH6Bg0P6swLZv8Lc28p1z+4HFwM34Ewhm1sA5t9Q5NxJYgL91BdDezE4PjE1cgb+uRzt+h1wR9PPrwPw04LZDBcysuGRWrsysNrDXOfdv4EmgdWBTtplVxd/VVNRqIN7MOgb2EWVmqYHjk+Kc+xK4F4jB34UnJ0AtivD3NvBfjrwC6pThnPvOzBYBy4G1+LtdcM7tN7NBwKdmlo3/pNi8mF3cAYw3s3uALOC68om8RK4GxprZMPz96ROB75xzv5jZRuBQ19ss/IlwaWD5b2bWBX/LZAUwGX+30dfA40AL/K2PD5xz+cUdvyAVzewb/B8MDyXbO4DnzWwJ/vPATPwtHC+1AJ4ws3zgIHAL0A//MVnH4W65As65A+a/TPY5M4vGX5dngO+BfwfWGf6rCXeUSy1OQXqEh8hJwsw647/YoddxvGYd/q6b7LKKS0596noSEZGQ1KIQEZGQ1KIQEZGQlChERCQkJQoREQlJiUJEREJSohARkZD+PykQyieBA4YwAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data.corr(),annot=True,cmap='Greens')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>TV</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.782224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>radio</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.576223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>newspaper</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sales</th>\n",
       "      <td>0.782224</td>\n",
       "      <td>0.576223</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 TV     radio  newspaper     sales\n",
       "TV         1.000000       NaN        NaN  0.782224\n",
       "radio           NaN  1.000000        NaN  0.576223\n",
       "newspaper       NaN       NaN        1.0       NaN\n",
       "sales      0.782224  0.576223        NaN  1.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlation=data.corr()\n",
    "cor=correlation[correlation>0.5]\n",
    "cor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a217175d0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(cor,annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230.1</td>\n",
       "      <td>37.8</td>\n",
       "      <td>69.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44.5</td>\n",
       "      <td>39.3</td>\n",
       "      <td>45.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.2</td>\n",
       "      <td>45.9</td>\n",
       "      <td>69.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>151.5</td>\n",
       "      <td>41.3</td>\n",
       "      <td>58.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>180.8</td>\n",
       "      <td>10.8</td>\n",
       "      <td>58.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>38.2</td>\n",
       "      <td>3.7</td>\n",
       "      <td>13.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>94.2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>177.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>6.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>283.6</td>\n",
       "      <td>42.0</td>\n",
       "      <td>66.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>232.1</td>\n",
       "      <td>8.6</td>\n",
       "      <td>8.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TV  radio  newspaper\n",
       "0    230.1   37.8       69.2\n",
       "1     44.5   39.3       45.1\n",
       "2     17.2   45.9       69.3\n",
       "3    151.5   41.3       58.5\n",
       "4    180.8   10.8       58.4\n",
       "..     ...    ...        ...\n",
       "195   38.2    3.7       13.8\n",
       "196   94.2    4.9        8.1\n",
       "197  177.0    9.3        6.4\n",
       "198  283.6   42.0       66.2\n",
       "199  232.1    8.6        8.7\n",
       "\n",
       "[200 rows x 3 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=data.drop(columns=['sales'])\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>12.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>13.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sales\n",
       "0     22.1\n",
       "1     10.4\n",
       "2      9.3\n",
       "3     18.5\n",
       "4     12.9\n",
       "..     ...\n",
       "195    7.6\n",
       "196    9.7\n",
       "197   12.8\n",
       "198   25.5\n",
       "199   13.4\n",
       "\n",
       "[200 rows x 1 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=data[['sales']]\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "lm=LinearRegression()\n",
    "lm.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(150, 3)\n",
      "(50, 3)\n",
      "(150, 1)\n",
      "(50, 1)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.89257005]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.04416235, 0.19900368, 0.00116268]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(lm.intercept_)\n",
    "lm.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10.62420524],\n",
       "       [19.5419182 ],\n",
       "       [18.37463236],\n",
       "       [15.26284415],\n",
       "       [10.02487307],\n",
       "       [ 8.17260763],\n",
       "       [21.50975323],\n",
       "       [14.14823568],\n",
       "       [16.30996795],\n",
       "       [ 8.85509348],\n",
       "       [15.23153021],\n",
       "       [12.32242242],\n",
       "       [13.64852005],\n",
       "       [14.17607882],\n",
       "       [18.40185911],\n",
       "       [19.24193422],\n",
       "       [20.24381109],\n",
       "       [17.44505298],\n",
       "       [ 9.24109062],\n",
       "       [11.75336116],\n",
       "       [19.79642606],\n",
       "       [ 9.80950414],\n",
       "       [20.80042258],\n",
       "       [23.32343742],\n",
       "       [10.13147045],\n",
       "       [17.3137333 ],\n",
       "       [19.53122711],\n",
       "       [18.50680928],\n",
       "       [16.84593627],\n",
       "       [18.57944535],\n",
       "       [17.06456086],\n",
       "       [ 8.86557659],\n",
       "       [ 9.96958118],\n",
       "       [ 5.33193027],\n",
       "       [ 3.58046283],\n",
       "       [16.57691776],\n",
       "       [12.86700495],\n",
       "       [18.07899796],\n",
       "       [11.79508257],\n",
       "       [12.56748077],\n",
       "       [13.73208519],\n",
       "       [ 6.99405932],\n",
       "       [16.59518043],\n",
       "       [ 9.77789051],\n",
       "       [ 8.03719883],\n",
       "       [15.5975553 ],\n",
       "       [24.90100375],\n",
       "       [11.03711104],\n",
       "       [21.32059879],\n",
       "       [13.71934146],\n",
       "       [10.80505837],\n",
       "       [ 8.38304304],\n",
       "       [12.37334698],\n",
       "       [20.65712246],\n",
       "       [10.4343308 ],\n",
       "       [14.56194942],\n",
       "       [16.45430324],\n",
       "       [17.23321262],\n",
       "       [13.08271843],\n",
       "       [17.40102398],\n",
       "       [21.23485322],\n",
       "       [ 8.21816066],\n",
       "       [16.128531  ],\n",
       "       [15.1627911 ],\n",
       "       [ 8.7191981 ],\n",
       "       [13.85893495],\n",
       "       [16.36845815],\n",
       "       [ 9.50205237],\n",
       "       [14.38866714],\n",
       "       [18.11211552],\n",
       "       [21.07587382],\n",
       "       [ 9.09218594],\n",
       "       [20.24402945],\n",
       "       [20.79379739],\n",
       "       [13.62789314],\n",
       "       [ 4.44950791],\n",
       "       [17.87003424],\n",
       "       [11.91548589],\n",
       "       [11.00002964],\n",
       "       [23.85213543],\n",
       "       [11.98654864],\n",
       "       [18.86210181],\n",
       "       [20.91768784],\n",
       "       [ 8.09980102],\n",
       "       [ 5.38870563],\n",
       "       [14.37156394],\n",
       "       [15.75478975],\n",
       "       [ 4.49248707],\n",
       "       [14.86419765],\n",
       "       [17.15496491],\n",
       "       [ 6.95930619],\n",
       "       [17.30167806],\n",
       "       [16.55636207],\n",
       "       [12.74765278],\n",
       "       [ 7.79155261],\n",
       "       [12.73107591],\n",
       "       [14.519724  ],\n",
       "       [14.84448733],\n",
       "       [21.37312978],\n",
       "       [18.28492644],\n",
       "       [ 8.67887549],\n",
       "       [11.75731763],\n",
       "       [23.26527758],\n",
       "       [10.15017546],\n",
       "       [19.31851392],\n",
       "       [20.21883379],\n",
       "       [ 9.79504744],\n",
       "       [22.37643592],\n",
       "       [ 7.40611559],\n",
       "       [19.29978696],\n",
       "       [15.6995502 ],\n",
       "       [ 9.96446734],\n",
       "       [11.3860424 ],\n",
       "       [11.19072829],\n",
       "       [ 6.44508689],\n",
       "       [19.89601047],\n",
       "       [ 7.51853601],\n",
       "       [19.28135518],\n",
       "       [17.56480535],\n",
       "       [23.43553974],\n",
       "       [ 9.24192788],\n",
       "       [17.21513972],\n",
       "       [10.29555651],\n",
       "       [ 9.57458847],\n",
       "       [13.23556424],\n",
       "       [12.60442341],\n",
       "       [18.62118968],\n",
       "       [10.66568208],\n",
       "       [13.90224774],\n",
       "       [15.22203608],\n",
       "       [14.02384796],\n",
       "       [14.34151869],\n",
       "       [18.29345425],\n",
       "       [13.40611954],\n",
       "       [12.82277754],\n",
       "       [20.50122954],\n",
       "       [22.11640824],\n",
       "       [ 9.53214741],\n",
       "       [11.95203969],\n",
       "       [17.81980153],\n",
       "       [15.93437251],\n",
       "       [23.40167495],\n",
       "       [14.41895285],\n",
       "       [12.25826525],\n",
       "       [14.63435022],\n",
       "       [11.94179762],\n",
       "       [ 4.50481814],\n",
       "       [ 6.44298392],\n",
       "       [21.76727929],\n",
       "       [ 7.77789155]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred=lm.predict(X_train)\n",
    "y_train_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sales\n",
       "71   False\n",
       "124  False\n",
       "184  False\n",
       "97   False\n",
       "149  False\n",
       "..     ...\n",
       "67   False\n",
       "192  False\n",
       "117  False\n",
       "47   False\n",
       "172  False\n",
       "\n",
       "[150 rows x 1 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred == y_train\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10.0494569 ],\n",
       "       [ 7.43052335],\n",
       "       [ 6.97152143],\n",
       "       [24.16378667],\n",
       "       [12.00215643],\n",
       "       [ 6.54334645],\n",
       "       [13.09526331],\n",
       "       [14.95879164],\n",
       "       [11.00528358],\n",
       "       [16.27234553],\n",
       "       [22.99324688],\n",
       "       [ 9.12188347],\n",
       "       [10.33545333],\n",
       "       [15.39628185],\n",
       "       [11.60589932],\n",
       "       [12.11484332],\n",
       "       [18.60251172],\n",
       "       [10.81414474],\n",
       "       [16.07541355],\n",
       "       [17.22753644],\n",
       "       [24.2342995 ],\n",
       "       [ 9.47711838],\n",
       "       [15.13960412],\n",
       "       [12.41064749],\n",
       "       [ 5.67814427],\n",
       "       [15.22889947],\n",
       "       [12.21635459],\n",
       "       [20.94370559],\n",
       "       [13.28068231],\n",
       "       [ 9.16578351],\n",
       "       [13.30285718],\n",
       "       [21.5770033 ],\n",
       "       [18.098111  ],\n",
       "       [21.15572322],\n",
       "       [ 6.69734039],\n",
       "       [ 6.15355714],\n",
       "       [ 7.96280151],\n",
       "       [13.09426248],\n",
       "       [14.81032968],\n",
       "       [ 6.22020075],\n",
       "       [12.2799744 ],\n",
       "       [ 9.1817324 ],\n",
       "       [15.04882696],\n",
       "       [16.26091437],\n",
       "       [17.16859664],\n",
       "       [13.32831849],\n",
       "       [ 3.69143664],\n",
       "       [12.43931798],\n",
       "       [15.87909695],\n",
       "       [ 8.68626862]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred=lm.predict(X_test)\n",
    "y_test_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sales\n",
       "18   False\n",
       "170  False\n",
       "107  False\n",
       "98   False\n",
       "177  False\n",
       "182  False\n",
       "5    False\n",
       "146  False\n",
       "12   False\n",
       "152  False\n",
       "61   False\n",
       "125  False\n",
       "180  False\n",
       "154  False\n",
       "80   False\n",
       "7    False\n",
       "33   False\n",
       "130  False\n",
       "37   False\n",
       "74   False\n",
       "183  False\n",
       "145  False\n",
       "45   False\n",
       "159  False\n",
       "60   False\n",
       "123  False\n",
       "179  False\n",
       "185  False\n",
       "122  False\n",
       "44   False\n",
       "16   False\n",
       "55   False\n",
       "150  False\n",
       "111  False\n",
       "22   False\n",
       "189  False\n",
       "129  False\n",
       "4    False\n",
       "83   False\n",
       "106  False\n",
       "134  False\n",
       "66   False\n",
       "26   False\n",
       "113  False\n",
       "168  False\n",
       "63   False\n",
       "8    False\n",
       "75   False\n",
       "118  False\n",
       "143  False"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred == y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R^2:  0.9072183330817297\n",
      "Adjusted R^2 value: 0.9053118604738201\n",
      "MAE: 1.2248611099616429\n",
      "MSE: 2.4389174933908486\n",
      "RMSE 1.5617033948195311\n"
     ]
    }
   ],
   "source": [
    "print('R^2: ',r2_score(y_train,y_train_pred))\n",
    "print(\"Adjusted R^2 value:\",1-(1-r2_score(y_train,y_train_pred))*(len(X_train)-1)/(len(X_train)-X_train.shape[1]-1))\n",
    "print('MAE:',mean_absolute_error(y_train,y_train_pred))\n",
    "print('MSE:',mean_squared_error(y_train,y_train_pred))\n",
    "print('RMSE',np.sqrt(mean_squared_error(y_train,y_train_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R^2:  0.8576396745320892\n",
      "Adjusted R^2 value: 0.8483553054798342\n",
      "MAE: 1.3000320919235457\n",
      "MSE: 4.012497522917102\n",
      "RMSE 2.0031219440955415\n"
     ]
    }
   ],
   "source": [
    "print('R^2: ',r2_score(y_test,y_test_pred))\n",
    "print(\"Adjusted R^2 value:\",1-(1-r2_score(y_test,y_test_pred))*(len(X_test)-1)/(len(X_test)-X_test.shape[1]-1))\n",
    "print('MAE:',mean_absolute_error(y_test,y_test_pred))\n",
    "print('MSE:',mean_squared_error(y_test,y_test_pred))\n",
    "print('RMSE',np.sqrt(mean_squared_error(y_test,y_test_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
